<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Craig Marvelley]]></title>
  <link href="http://marvelley.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://marvelley.com/"/>
  <updated>2014-10-17T09:18:38+00:00</updated>
  <id>http://marvelley.com/</id>
  <author>
    <name><![CDATA[Craig Marvelley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UISplitViewController Collapsing and Separating in iOS 8]]></title>
    <link href="http://marvelley.com/blog/2014/09/27/uisplitviewcontroller-collapsing-and-separating-in-ios-8/"/>
    <updated>2014-09-27T22:39:43+00:00</updated>
    <id>http://marvelley.com/blog/2014/09/27/uisplitviewcontroller-collapsing-and-separating-in-ios-8</id>
    <content type="html"><![CDATA[<p>The new UISplitViewController class and delegate methods in iOS 8 is interesting, and caused me a lot of head scratching last week.
The problem Brent Simmons describes <a href="http://inessential.com/2014/09/27/uisplitviewcontroller_question">here</a>, where
after rotating the device from regular to compact size class and back again iOS uses the topmost master view controller
as the new detail view, instead of the previous detail view, is roughly the same issue I had.</p>

<p>As far as I can tell so far, I think the following approach solves the issue. Note that I don&rsquo;t think I have the same set up as
Brent - I have a navigation stack in each of the master and detail sides - but I think the general approach
is sound, based on advice from Apple in the the &ldquo;Building Adaptive Apps with UIKit&rdquo; session from this year&rsquo;s WWDC,
and the &ldquo;AdaptivePhotos&rdquo; sample app code they provide.</p>

<p>My UISplitViewController delegate looks like this:</p>

<p><div><script src='https://gist.github.com/c3cbbb717c3ef957cbbe.js'></script>
<noscript><pre><code>#import &quot;UISplitViewControllerDelegateService.h&quot;
#import &quot;NoteViewController.h&quot;

@interface UISplitViewControllerDelegateService () &lt;UISplitViewControllerDelegate&gt;

@end

@implementation UISplitViewControllerDelegateService

- (id)initWithSplitViewController:(UISplitViewController *)controller {
    
    self = [super init];
    if (!self) {
        return nil;
    }
    
    self.splitViewController = controller;
    controller.delegate = self;
    
    return self;
    
}

#pragma mark - Split view

- (BOOL)splitViewController:(UISplitViewController *)splitViewController collapseSecondaryViewController:(UIViewController *)secondaryViewController ontoPrimaryViewController:(UIViewController *)primaryViewController {
    
    if ([secondaryViewController isKindOfClass:[UINavigationController class]]
        &amp;&amp; [[(UINavigationController *)secondaryViewController topViewController] isKindOfClass:[NoteViewController class]]
        &amp;&amp; ([(NoteViewController *)[(UINavigationController *)secondaryViewController topViewController] note] == nil)) {
        // If the detail controller doesn't have an item, display the primary view controller instead
        return YES;
    }

    return NO;
    
}

- (UIViewController *)splitViewController:(UISplitViewController *)splitViewController
separateSecondaryViewControllerFromPrimaryViewController:(UIViewController *)primaryViewController{
    
    if ([primaryViewController isKindOfClass:[UINavigationController class]]) {
        for (UIViewController *controller in [(UINavigationController *)primaryViewController viewControllers]) {
            if ([controller isKindOfClass:[UINavigationController class]] &amp;&amp; [[(UINavigationController *)controller visibleViewController] isKindOfClass:[NoteViewController class]]) {
                return controller;
            }
        }
    }
    
    // No detail view present
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@&quot;Main&quot; bundle:nil];
    UINavigationController *detailView = [storyboard instantiateViewControllerWithIdentifier:@&quot;detailView&quot;];
    
    // Ensure back button is enabled
    UIViewController *controller = [detailView visibleViewController];
    controller.navigationItem.leftBarButtonItem = self.splitViewController.displayModeButtonItem;
    controller.navigationItem.leftItemsSupplementBackButton = YES;

    return detailView;
    
}

@end
</code></pre></noscript></div>
</p>

<ul>
<li>In the &lsquo;collapse&rsquo; method, which is called when the device rotates to portrait, we disregard the detail view controller and use the
master view controller if the detail view has no content</li>
<li>In the &lsquo;merge&rsquo; method, we look to see if there&rsquo;s a navigation controller which is displaying a NoteViewController (this controller
is currently only used as a detail view, exclusively, so it&rsquo;s a safe bet). If it exists, we use it - otherwise we retrieve the &lsquo;stock&rsquo;
note view controller stack from the storyboard and use that.</li>
</ul>


<p>This approach seems to have worked well so far. The majority of issues I&rsquo;ve found have been on the iPhone 6 Plus, which combines the
single hierarchy approach of the smaller form factor devices in regular mode, with the side-by-side dual view approach or the larger form factors
in compact mode - this hybrid strategy seems to require more direction on our part, whereas elsewhere iOS tends to guess right on its own.</p>

<p>A final note - having to manually ensure the back button exists and is configured on the detail view controller is a bit icky, but I needed
to do this to avoid a crash. I&rsquo;d love to hear from anyone with more elegant ways to handle this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three20, XCode 4 and the Case of the Missing Header Files.]]></title>
    <link href="http://marvelley.com/2011/08/25/three20-xcode-4-and-the-case-of-the-missing-header-files/"/>
    <updated>2011-08-25T00:00:00+00:00</updated>
    <id>http://marvelley.com/2011/08/25/three20-xcode-4-and-the-case-of-the-missing-header-files</id>
    <content type="html"><![CDATA[<p>After a good hour of hitting my head against a brick wall, I finally managed to get Facebook&#8217;s three20 iOS library integrated with my XCode 4 based project, documented here for posterity and the hope that it may save someone else from the raw, savage agony I&#8217;m currently feeling.</p>

<p>I followed the instructions on the <a href="http://three20.info/article/2010-10-06-Adding-Three20-To-Your-Project">three20 website</a> to the letter, using the python installation script to add the library to my project, but whenever I tried to include the main Three20.h header file within my application code I got a &#8216;file not found&#8217; warning which failed the build. After much trial and error / Stack Overflow searching I came across <a href="http://stackoverflow.com/questions/6833804/problem-with-three20">this post</a> which seemed to suggest trying every header search path under the sun. Indeed, one of these finally worked &#8211; I narrowed it down to the $(BUILT_PRODUCTS_DIR)/../three20 entry, but YMMV.</p>

<p>As much as I like iOS, and XCode, Apple&#8217;s solution for integrating libraries is extremely error prone &#8211; and this wasÂ <em>with</em> a custom installation script. Hopefully once XCode 4 adoption has grown the process can be simplified, as newer libraries like <a href="http://restkit.org/">RestKit</a> seem to be less complicated to install.</p>
]]></content>
  </entry>
  
</feed>
