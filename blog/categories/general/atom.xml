<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | Craig Marvelley]]></title>
  <link href="http://craigmarvelley.github.io/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://craigmarvelley.github.io/"/>
  <updated>2014-02-03T20:55:23+00:00</updated>
  <id>http://craigmarvelley.github.io/</id>
  <author>
    <name><![CDATA[Craig Marvelley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Including Filtered Thumbnail Data With the WordPress JSON API Plugin]]></title>
    <link href="http://craigmarvelley.github.io/2013/09/26/including-filtered-thumbnail-data-with-the-wordpress-json-api-plugin/"/>
    <updated>2013-09-26T00:00:00+01:00</updated>
    <id>http://craigmarvelley.github.io/2013/09/26/including-filtered-thumbnail-data-with-the-wordpress-json-api-plugin</id>
    <content type="html"><![CDATA[<p>The <a href="http://wordpress.org/plugins/json-api/">JSON API</a> plugin is a great tool for exposing your WordPress data. I&#8217;ve used it to provide content to a few mobile applications; it&#8217;s well featured and most importantly, quite flexible. If your content providers are happiest using a CMS like WordPress, your project can benefit by allowing them to use the authoring tools they&#8217;re comfortable with while allowing you to easily access the content they&#8217;re creating, either to use directly within your application, or as I tend to do, by exporting the data into another application which then proxies the data to mobile applications. I find the latter approach gives you greater control over features like caching, while making it easier to relate the data to domain models that aren&#8217;t handled by WordPress.</p>

<p>But I digress! This post was conceived because when requesting all posts of a certain type through the plugin, response times were hideously slow. The request I was making looked like this:</p>

<p><a href="http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=1000&amp;order=ASC">http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=1000&amp;order=ASC</a></p>

<p>Reading the documentation for the plugin, I found that it was possible to filter the response to only contain properties that I wanted, which I figured should reduce the amount of work WordPress was having to do:</p>

<p><a href="http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=2&amp;order=ASC&amp;include=id,title,content,custom_fields,thumbnail_images">http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=2&amp;order=ASC&amp;include=id,title,content,custom_fields,thumbnail_images</a></p>

<p>This proved to be true, but I hit a snag when trying to include the thumbnail_images property &#8211; adding it to the CSV of whitelisted fields had no effect. Through trial and error it transpired that including the thumbnail field also has the effect of including the thumbnail, thumbnail_size, and thumbnail_images fields. The final URL ended up looking like this:</p>

<p><a href="http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=2&amp;order=ASC&amp;include=id,title,content,custom_fields,thumbnail">http://domain.com/?json=get_posts&amp;post_type=artist&amp;count=2&amp;order=ASC&amp;include=id,title,content,custom_fields,thumbnail</a></p>

<p>Problem solved!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Incremental Improvement]]></title>
    <link href="http://craigmarvelley.github.io/2013/01/06/on-incremental-improvement/"/>
    <updated>2013-01-06T00:00:00+00:00</updated>
    <id>http://craigmarvelley.github.io/2013/01/06/on-incremental-improvement</id>
    <content type="html"><![CDATA[<p>Twice today I&#8217;ve seen references to the benefits of iterative improvement, and I found that the topic resonated with me. At the moment I&#8217;m halfway though a pretty lengthy software project in which it&#8217;s sometimes hard to see the wood for the trees. The backlog is substantial, resulting in a hefty set of tasks for our team. In these situations, where the to-do list doesn&#8217;t seem to change day to day, it&#8217;s easy to feel crippled by inertia. However, these two references illustrate that we can succeed provided we ensure we&#8217;re making healthy, gradual progress.</p>

<p>One might expect that the references I&#8217;m alluding to originate from a tome of software development, like &#8220;<a href="http://pragprog.com/the-pragmatic-programmer">The Pragmatic Programmer</a>&#8220;, or from one of the many celebrated development gurus of Twitter, but in fact they are not directly concerned with software at all. The first comes from <a href="http://www.youtube.com/watch?v=7GHhmgZ0BwQ" title="The Undercover Economist Tim Harford: Full talk from Wired 2012">a talk discussing the pros and cons of iterative improvement</a> , linked to by my colleague (and all-round good chap) <a href="https://twitter.com/owenphelps" title="Owen Phelps' Twitter">Owen Phelps</a>, by Tim Harford at last year&#8217;s Wired UK conference:</p>

<blockquote><p>If you put together enough marginal improvements, in enough areas, you get something that&#8217;s truly outstanding.</p></blockquote>

<p>Give it a watch &#8211; it&#8217;s entertaining and informative.</p>

<p>The second reference came from an altogether different source &#8211; <a href="http://www.soundonsound.com/sos/jan13/articles/it-0113.htm" title="Alan Moulder: Sound on Sound January 2012">an interview with renowned mix engineer Alan Moulder</a> in this month&#8217;s issue of Sound on Sound magazine, in which he discusses his approach when applying VST plugins to his music projects:</p>

<blockquote><p>All the things I use do something to make the sound a tiny bit better, and if  you add everything together, the end result will be a lot better&#8230; It&#8217;s simple: better is better, whether it&#8217;s a tiny bit better or a lot better.</p></blockquote>

<p>Through never-ending sprints, features and tasks, iterative improvement is something all development teams should strive to achieve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jeff Atwood Is a Muppet.]]></title>
    <link href="http://craigmarvelley.github.io/2012/06/30/jeff-atwood-is-a-muppet/"/>
    <updated>2012-06-30T00:00:00+01:00</updated>
    <id>http://craigmarvelley.github.io/2012/06/30/jeff-atwood-is-a-muppet</id>
    <content type="html"><![CDATA[<p>I was having a nice, relaxing Saturday morning until I read through my Twitter timeline and was directed to Jeff Atwood&#8217;s latest post on Coding Horror, &#8220;<a href="http://www.codinghorror.com/blog/2012/06/the-php-singularity.html">The PHP Singularity</a>&#8220;. After reading through it, and the comments from other readers, I got annoyed. Really annoyed.</p>

<p>I won&#8217;t repeat the article, but the gist of it is:</p>

<ul>
<li>PHP is a horrible language</li>
<li>Something must be done</li>
<li>Jeff is the person to do it</li>
</ul>


<p>I quite enjoy blogging but I don&#8217;t do it very often. I try to make sure anything I talk about is well researched, because a baseless opinion is worthless, but I don&#8217;t have a lot of free time &#8211; so if I don&#8217;t have something I consider worth saying, I don&#8217;t say it.</p>

<p>Jeff doesn&#8217;t have the same concern. You may wonder why I read his blog, given that I clearly take exception to some of its content, but the funny thing is that when talking about things he is knowledgable of, he has some great advice.</p>

<p>Like when he talks about <a href="http://www.codinghorror.com/blog/2011/10/on-parenthood.html">his children</a>, because he obviously knows them, or <a href="http://www.codinghorror.com/blog/2012/06/because-everyone-still-needs-a-router.html">routers</a>, where he&#8217;s clearly done some investigation. Now, I&#8217;m about to become a father, so I really enjoyed the former post, and if I needed to buy a router, I&#8217;d probably just be lazy and pick one from the latter because he knows a lot more about them than I do.</p>

<p>But here&#8217;s the thing. Jeff doesn&#8217;t seem to know much about PHP. I&#8217;d guess he&#8217;s read some posts about it, seen a few Q&amp;As on Stack Overflow about it (a site he deserves massive kudos for), read through the PHP Manual, whatever &#8211; but he&#8217;s not a PHP developer. When he says PHP is &#8216;terrible&#8217; or &#8216;deeply flawed&#8217;, I wonder how he&#8217;s come to that conclusion? Has he ever developed anything substantial in PHP? What is he basing this opinion on? He&#8217;s played with his children, he&#8217;s bought and installed a router. But when it comes to PHP, is the extent of his knowledge that which he has gleaned from others? Because if that&#8217;s the case, he really should think twice about offering his opinion on it.</p>

<p>The most glaring statement in the entire article is this one:</p>

<blockquote><p>Therefore, I&#8217;d like to submit a humble suggestion to my fellow programmers. The next time you feel the urge to write Yet Another Epic Critique of PHP, consider that:</p>

<ol>
<li>We get it already. PHP is horrible, but it&#8217;s used everywhere. Guess what? It was just as horrible in 2008. And 2005. And 2002. There&#8217;s a pattern here, but it&#8217;s subtle. You have to look very closely to see it. On second thought, never mind. You&#8217;re probably not smart enough to figure it out.</li>
<li>The best way to combat something as pervasively and institutionally awful as PHP is not to point out all its (many, many, <em>many</em>) faults, but to <strong>build compelling alternatives</strong> and <strong>make sure these alternatives are equally pervasive, as easy to set up and use as possible</strong>.</li>
</ol>
</blockquote>

<p>How anyone can offer a &#8216;humble&#8217; suggestion and then go on to question the reader&#8217;s intelligence is besides the point (though it does nicely illustrate Jeff&#8217;s technique of drawing the reader in with deference only to hit them with a massive dose of self-righteousness) &#8211; but there&#8217;s two things I really take exception to here. Firstly, as <strong>anyone</strong> who has spent any real time with PHP knows, the language is far, far different now to what it was in 2002. For heaven&#8217;s sake, PHP5 (with a brand new object model that made proper OOP possible) didn&#8217;t make its debut &#8217;til 2004, and support for register_globals (one of the worst features of PHP, ever) was removed in the most recent version, 5.4. Those facts are available under <a href="http://en.wikipedia.org/wiki/PHP">PHP&#8217;s entry on Wikipedia</a>, but perhaps Jeff&#8217;s not smart enough to Google the history of PHP before commenting on it?</p>

<p>Secondly; assuming for a second that PHP is as horrible as he deems it to be &#8211; the best way to &#8216;combat&#8217; it isn&#8217;t to &#8216;build compelling alternatives&#8217; and &#8216;make sure these alternatives are equally pervasive, as easy to set up and use as possible&#8217; &#8211; no, the &#8216;best&#8217; thing to do (considering the amount of developers and sites worldwide who depend on the language and are getting things done with it every single day) is <strong>get involved</strong> with and <strong>actually understand</strong> PHP &#8211; read the <a href="http://news.php.net/php.internals">internals mailing list</a>, make <a href="https://wiki.php.net/rfc">requests for comments</a>, code contributions, etc. It&#8217;s a silly person who decides to try something new before attempting to fix what&#8217;s broken, when there is so much invested in it. Perhaps if Jeff wasn&#8217;t trying to drum up interest in this new project of his, he&#8217;d have been a little less inflammatory?</p>

<p>Look, as someone who has used PHP successfully for the last decade, obviously I&#8217;m going to disagree with Jeff&#8217;s opinion. But the language has not only helped me get a great job, a nice house, and will shortly be helping me pay for one of those baby things, it&#8217;s also made Facebook the biggest website in the world, and enabled Yahoo! to build (ok, and throw away, but it&#8217;s not PHP&#8217;s fault) an empire. When Jeff&#8217;s got off his soap box and tried to build something equally successful in PHP <strong>and failed</strong>, I&#8217;ll start taking his opinion seriously.</p>

<p>As I said, I don&#8217;t like making statements unless I&#8217;ve researched them fully. I&#8217;ve read Coding Horror for a long time, and I feel qualified to say that Jeff Atwood is a <a href="http://www.urbandictionary.com/define.php?term=muppet&amp;defid=778738">muppet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Web Apps Like a (England) Boss.]]></title>
    <link href="http://craigmarvelley.github.io/2012/05/16/building-web-apps-like-a-england-boss/"/>
    <updated>2012-05-16T00:00:00+01:00</updated>
    <id>http://craigmarvelley.github.io/2012/05/16/building-web-apps-like-a-england-boss</id>
    <content type="html"><![CDATA[<p>If you think app development and football have nothing in common, read on.</p>

<p>There was a discussion on our IRC server at work this morning which centred on how to best mitigate the risk involved with using third party tools in web applications. Not just at the code level, as in a JavaScript library like <a href="http://jquery.com/">jQuery</a>, or a PHP framework like <a href="http://symfony.com/">Symfony2</a>, but right through the stack &#8211; from the OS, to the web server, to the app codebase and beyond.</p>

<p>Much of the discussion was along the lines of what you&#8217;d expect when devops (or sysadmins) and developers collide &#8211; those responsible for managing the stack want things that can be easily automated, are verifiable (ideally through something like checksums) and reliable (i.e. not placed directly on a production server from a Pentium 3 machine in some teenager&#8217;s bedroom half way round the world), while those responsible for writing the code want to be able to use the best tool for the job, whether it be a tried and trusted web server or the newest, shiniest Symfony2 bundle.</p>

<p>The general consensus was that both have equal importance. Personally, I think that depending on the nature of the app, it&#8217;s wise to proportion risk accordingly; an app with a USP centred around some novel, interactive UX may want to incorporate a new innovative JavaScript toolkit even if it&#8217;s yet to reach version 1.0, whereas an app with paramount speed and scalability requirements might want to try <a href="http://blog.digitalstruct.com/2010/07/12/getting-started-with-nginx-and-php-fpm/">PHP-FPM with nginx</a> in place of a more familiar solution like mod-php with Apache.</p>

<p>In isolation, either of these decisions probably wouldn&#8217;t pose a problem. Combining many such scenarios, though, may eventually load the project with enough risk as to eventually make it untenable. The holy grail is to arrive at a point where we have an app that delivers its required functionality while making use of as many trusted, reliable tools as possible, and can be managed in such a way as to make deployment and maintenance safe and simple.</p>

<p>Now, to the title of this post. While this discussion was raging in IRC, there was much furore over the <a href="http://www.guardian.co.uk/football/2012/may/16/euro-2012-england-squad-announcement-live">selection of the provisional England squad</a> for the Euro 2012 tournament. It occurred to me that the new England manager, Roy Hodgson, is facing many of the same challenges myself and my coworkers face when trying to decide on a strategy for selecting the players he thinks will combine to great effect in a few month&#8217;s time. He wants a team that blends reliable, experienced, mature players with younger, modern ones &#8211; with maybe a sprinkling of unpredictable, yet highly creative, firebrands that can make the difference between a good squad and a great one. This is essentially what I was trying to articulate in the conversation, but swapping players for libraries, or tools, written by myself, or by others.</p>

<p>So when I was scanning the list of players that are going to Poland and the Ukraine this summer, I couldn&#8217;t help but think of them in a technical fashion. For example:</p>

<ul>
<li>John Terry (Defender) &#8211; Very experienced, but can be unreliable and prone to catastrophic behaviour. (Windows OS &#8211; ever tried hosting a PHP app on Windows?).</li>
<li>Alex Oxlade-Chamberlain (Midfielder) &#8211; New kid on the block, has a speciality that offers a new dimension (see: nginx and content distribution networks)</li>
<li>Stuart Downing (Midfielder) &#8211; Does what he does and does it well enough, but isn&#8217;t going to make a massive difference overall. Comes with baggage and divides opinion. (CodeIgniter/CakePHP/any other technically limited PHP framework)</li>
<li>Wayne Rooney &#8211; Best of breed, unrivalled, links up with others very well, difficult to replicate or replace (jQuery)</li>
</ul>


<p>It&#8217;s a popular argument at the moment that more people should be aware of, and be able to, code. But perhaps we&#8217;re missing a trick &#8211; perhaps a few games of <a href="http://www.footballmanager.com/">Football Manager</a> is all it takes to be able to understand how to compose a fabulous web app these days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 7: Connecting to a Samsung Galaxy S2 Device With ADB]]></title>
    <link href="http://craigmarvelley.github.io/2012/05/01/windows-7-connecting-to-a-samsung-galaxy-s2-device-with-adb/"/>
    <updated>2012-05-01T00:00:00+01:00</updated>
    <id>http://craigmarvelley.github.io/2012/05/01/windows-7-connecting-to-a-samsung-galaxy-s2-device-with-adb</id>
    <content type="html"><![CDATA[<p>Step 1: Buy a Mac</p>
]]></content>
  </entry>
  
</feed>
