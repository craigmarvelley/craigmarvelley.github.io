<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | Craig Marvelley]]></title>
  <link href="http://marvelley.com/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://marvelley.com/"/>
  <updated>2014-09-27T23:13:52+00:00</updated>
  <id>http://marvelley.com/</id>
  <author>
    <name><![CDATA[Craig Marvelley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Waiting for SSH]]></title>
    <link href="http://marvelley.com/blog/2014/09/03/waiting-for-ssh/"/>
    <updated>2014-09-03T19:17:18+00:00</updated>
    <id>http://marvelley.com/blog/2014/09/03/waiting-for-ssh</id>
    <content type="html"><![CDATA[<p><strong>Update 2014/09/06</strong> - Michael DeHaan <a href="https://twitter.com/laserllama/status/507325690610728962">mentions on Twitter</a> that he adds in a few seconds of sleep with the pause module to ensure the SSH port is open.</p>

<p>I&rsquo;ve spent the day provisioning a whole lot of EC2 instances with Ansible from a control machine in the cloud. This involves two stages: firstly an instance is launched, and then once SSH is available (using Ansible&rsquo;s <code>wait_for</code> module), the second stage of more detailed provisioning begins.</p>

<p>An issue I&rsquo;d experienced a few times previously but had not been able to pinpoint, was that often the <code>wait_for</code> module failed to identify that SSH is ready. My Ansible task looked like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Wait until SSH is available
</span><span class='line'>  local_action:
</span><span class='line'>    module: wait_for
</span><span class='line'>    host: &ldquo;{{ item.public_dns_name }}&rdquo;
</span><span class='line'>    port: 22
</span><span class='line'>    delay: 60
</span><span class='line'>    timeout: 320
</span><span class='line'>    state: started
</span><span class='line'>  with_items: launched_instances.instances</span></code></pre></td></tr></table></div></figure></p>

<p>That task would often time out, but in such cases if I were to immediately try to SSH from the terminal it would succeed, which was odd indeed.</p>

<p>Today this behaviour was consistent, and I eventually realised that in the task I was using the instance&rsquo;s public DNS name, whereas when I was connecting via the terminal I used the public IP address. Indeed, changing the task to use the IP address seems to have made the whole thing a lot more reliable:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Wait until SSH is available
</span><span class='line'>  local_action:
</span><span class='line'>    module: wait_for
</span><span class='line'>    host: &ldquo;{{ item.public_ip }}&rdquo;
</span><span class='line'>    port: 22
</span><span class='line'>    delay: 60
</span><span class='line'>    timeout: 320
</span><span class='line'>    state: started
</span><span class='line'>  with_items: launched_instances.instances</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;m guessing that on my Mac (where this was rarely an issue) the DNS cache updates quicker than it does on the control machine in EC2, where this problem was more frequent - using the explicit IP address renders the issue moot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Interactive Ansible Tasks]]></title>
    <link href="http://marvelley.com/blog/2014/04/23/handling-interactive-ansible-tasks/"/>
    <updated>2014-04-23T09:40:10+00:00</updated>
    <id>http://marvelley.com/blog/2014/04/23/handling-interactive-ansible-tasks</id>
    <content type="html"><![CDATA[<p>I recently re-ran some Ansible provisioning scripts after upgrading the
base box to an Ubuntu 14.04 image and found they stalled midway through. The cause? One
task involved installing the PECL mongo module, and the installation process now prompts
the user to decide whether or not to build with Cyrus SASL support. I couldn&rsquo;t see a way to force
a decision via the PECL installer, and Ansible can&rsquo;t
respond to the prompt, so the provisioning process hung while awaiting an answer.</p>

<p>I found two ways to solve this.</p>

<h2>I&rsquo;ve been expecting you</h2>

<p>I did a bit of Googling and after coming across <a href="https://groups.google.com/forum/#!topic/ansible-project/pMy2VWgkQ1s">this post</a>
on the Ansible forum, I took a look at <a href="http://linux.die.net/man/1/expect">expect</a>. Expect lets you
script interactions with a spawned command, using regex to match against prompt text, and send
appropriate responses. It&rsquo;s a sound approach; I wrote a script that looked like this:</p>

<pre><code>#!/usr/bin/expect

spawn pecl install mongo

expect "Build with Cyrus SASL"
send "\r"

expect eof
</code></pre>

<p>And executed it on the box using Ansible&rsquo;s <code>script</code> module:</p>

<pre><code>- name: Install PECL mongo extension
  script: install_pecl_mongo.expect
</code></pre>

<p>Mission achieved. I felt very pleased with myself for about 30 seconds, which is
how long it took for Paul to wander over and tell me there was a simpler way to do it.
Expect is a really good solution for scripting varied or complex responses, but I wasn&rsquo;t
faced with that problem here&hellip;</p>

<h2>Yes man</h2>

<p>In this specific case, all I wanted to do was answer a prompt which needed a yes or no
answer, and I wasn&rsquo;t concerned which I went with. There&rsquo;s a linux command
called <a href="http://en.wikipedia.org/wiki/Yes_(Unix">yes</a> which &ldquo;outputs an affirmative response,
or a user-defined string of text continuously until killed&rdquo;, which is just what I needed.</p>

<p>So now my task looks like this:</p>

<pre><code>- name: Install PECL mongo extension
  shell: yes '' | pecl install mongo
</code></pre>

<p>Which continuously pipes the &lsquo;y&rsquo; character (by default) and a newline character into
the install command, automatically causing any prompts to be responded to in the
affirmative. For my simple use case it works perfectly, and is more straightforward than
writing expect scripts.</p>
]]></content>
  </entry>
  
</feed>
