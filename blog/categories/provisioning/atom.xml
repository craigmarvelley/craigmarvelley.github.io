<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Provisioning | Craig Marvelley]]></title>
  <link href="http://marvelley.com/blog/categories/provisioning/atom.xml" rel="self"/>
  <link href="http://marvelley.com/"/>
  <updated>2014-06-09T22:27:01+00:00</updated>
  <id>http://marvelley.com/</id>
  <author>
    <name><![CDATA[Craig Marvelley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local Provisioning With Ansible]]></title>
    <link href="http://marvelley.com/blog/2014/04/11/local-provisioning-with-ansible/"/>
    <updated>2014-04-11T21:24:00+00:00</updated>
    <id>http://marvelley.com/blog/2014/04/11/local-provisioning-with-ansible</id>
    <content type="html"><![CDATA[<p>I recently <a href="http://marvelley.com/blog/2014/03/18/vagrant-1-dot-5-syncing-situation/">mentioned</a>
I&rsquo;m going all-in on provisioning and running all my development
environments in VMs provisioned with Ansible. My Ansible use doesn&rsquo;t end there though &ndash;
I&rsquo;m also using it to provision my MacBook.</p>

<p>I&rsquo;d read of a few other people doing this &ndash; Benjamin Eberlei has a particularly
<a href="http://whitewashing.de/2013/11/19/setting_up_development_machines_ansible_edition.html">good post</a>
on the topic, and was pretty much the inspiration for me doing the
same. Setting up a new machine can be a bit of a bore, and while in theory it
only happens whenever I upgrade hardware I have been caught out in the past with kernel
corruption forcing a reinstall, and I&rsquo;d like
to minimise the hassle should it ever happen again. I have <a href="http://backblaze.com">backups</a>
, but one of the few upsides of going back to scratch with a machine is that it&rsquo;s an
opportunity for spring clean; a script that effectively lists all the essential
components of my computer, and configures them to my taste, makes that so much easier.</p>

<p>Anyway. A couple of people mentioned they&rsquo;d be interested in the playbooks I wrote
to provision my laptop, so I&rsquo;ve taken out anything personal to me and <a href="https://github.com/craigmarvelley/macbook-provisioning">mirrored them
on Github</a>.</p>

<p>Currently the provisioning involves four things:</p>

<ul>
<li>Install Homebrew and various brews</li>
<li>Install Homebrew Casks and various casks</li>
<li>Enable zsh as default shell and install oh-my-zsh</li>
<li>Install dotfiles to configure git, vim, etc. (my dotfiles repo is <a href="https://github.com/craigmarvelley/dotfiles">here</a>)</li>
</ul>


<p>It&rsquo;s all straightforward, but a couple of implementation details:</p>

<ul>
<li>I&rsquo;ve ended up using Alfred as my OS X search tool because I store my casks under <code>/usr/local</code>
with the other brew stuff and symlink to /Applications, and Spotlight doesn&rsquo;t
grok symlinks. Instead I configure Alfred to link in the cask files</li>
<li>I read on a few places on the web that the method I use to determine my current shell
process &ndash; <code>echo $SHELL</code> &ndash; isn&rsquo;t foolproof. Works for me, but YMMV</li>
</ul>


<p>There&rsquo;s more I could do in terms of what I manage, especially when it comes to
dotfile configuration (incidentally one of the best things about automating
provisioning in this way is you end up looking at other people&rsquo;s approaches,
and finding out about libraries and tools that you never even knew existed &ndash; <a href="http://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">Thoughtbot&rsquo;s rcm</a>
is one such example here).
Also I&rsquo;m still finding my way with Ansible, so my playbooks can undoubtedly be improved, especially
when it comes to idempotency.
Nevertheless I&rsquo;m really happy to have a record of my machine&rsquo;s starting state, and will enjoy adding to it as time
passes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant 1.5 Syncing Situation]]></title>
    <link href="http://marvelley.com/blog/2014/03/18/vagrant-1-dot-5-syncing-situation/"/>
    <updated>2014-03-18T09:39:02+00:00</updated>
    <id>http://marvelley.com/blog/2014/03/18/vagrant-1-dot-5-syncing-situation</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/2014/03/synchronised.jpg" alt="image" /></p>

<p>When starting work at <a href="http://www.bipsync.com">BipSync</a> I resolved to put the bits
and bobs I&rsquo;d learned about provisioning with Vagrant and Ansible into practice, and
no longer host development environments locally on my MacBook. The reasons were
twofold &ndash; firstly I wanted my development environment to mirror that
of live as closely as possible, and secondly when previously hosting multiple,
complex projects on one machine I experienced increased battery drain and frequent
slowdowns caused by active background services that I often didn&rsquo;t even need for my current
task. It was a pain to keep track of everything, especially when multiple versions
were required. So the attraction of having dev environments I could bring up and down, and if
necessary occasionally trash, was a strong one.</p>

<p>I&rsquo;d played with Vagrant / VirtualBox hosted projects on smallish codebases before,
where the default VirtualBox synced folder support was sufficient; however when
attempting to host and develop BipSync&rsquo;s sizeable applications it was quickly clear
that this combination wouldn&rsquo;t be fast enough to be fit for purpose.</p>

<p>Since VirtualBox has been <a href="http://puppetlabs.com/blog/new-vmware-provider-gives-vagrant-a-boost">acknowledged</a>
as the slowest of Vagrant&rsquo;s provider options, and we already had Parallels
licences for the development of our Windows applications, next I tried out the
third party <a href="https://github.com/Parallels/vagrant-parallels">Parallels plugin for Vagrant</a>.
Basically this was a non-starter &ndash; I immediately ran into bugs that were present in the project&rsquo;s
issue tracker, and the impression I got was that the plugin is still a work-in-progress.
The plugin is overseen by Parallels so I&rsquo;m optimistic that it&rsquo;ll one day be a
first-class provider, but as it was it was unusable.</p>

<p>So I went back to VirtualBox (VMWare was another option but before forking out money on the
software and accompanying plugin I wanted to exhaust all other options) and tried the other
synced folder types. First I tried the new rsync support, which I&rsquo;d <a href="https://www.vagrantup.com/blog/feature-preview-vagrant-1-5-rsync.html">read good things
about</a>. In terms of speed this was very quick because there isn&rsquo;t really a share to speak
of; shared items are copied to the guest rather than mounted. It requires a command
to be run constantly, to watch synced files for changes and copy them to the guest, and
this proved to be a problem; as <a href="https://github.com/mitchellh/vagrant/issues/3249">issues raised</a>
by others attest, the approach wasn&rsquo;t scaling to large (20k+ files) codebases, which
is common in my experience. I tried excluding some folders to see if that would help,
but it didn&rsquo;t.</p>

<p>So after all that I ended up using the NFS sync option, which aside from requiring
a password for sudo when booting the VM has proved trouble free, so far. Performance
is good, both in terms of the applications themselves, and when browsing and modifying files
in the share; I&rsquo;ve seen PHPStorm occasionally lock up but then it always has ;) It&rsquo;s
certainly good enough to work with now, and I&rsquo;ll be keeping an eye on the rsync and Parallels
options as they should improve in time.</p>

<p>(&ldquo;Moonlight Synchro&rdquo; image courtesy of <a href="http://www.flickr.com/photos/72562013@N06/12765457844/">Chris Phutully</a>. <a href="https://creativecommons.org/licenses/by/2.0/">See license</a>.)</p>
]]></content>
  </entry>
  
</feed>
